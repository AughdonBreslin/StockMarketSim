// Stock Market Simulation Project Database Proposal

// users
{
    "_id": "507f1f77bcf86cd799439011", /* ObjectId user_id*/

    "fullName": "Daniel Dae Kim",

    "email": "danielKim4815162342@gmail.com",
    "username": "Jin Soo Kwon",

    "hashed-password": "$5$MnfsQ4iN$ZMTppKN16y/tIsUYs/obHlhdP.Os80yXhTurpBMUbA5",

    "email-updates": "weekly", /* none, hourly, daily, weekly, monthly */
    "lastUpdate" : "<YYYY-mm-dd>", /* store as new Date Object */
    "firstTimeLogIn": false //Initially sent to false, then turned to true when stock portfolio is created
}


// portfolio 
{
    "_id": "507f1f77bcf86cd799439011",
    "user_id": "507f1f77bcf86cd799439011", /* Each stock-portfolio must correspond to a user_id */
    
    "value": 15000, /* Combined value of all owned stocks. min: 0. max: Number.MAX_SAFE_INTEGER - 1*/
    "balance": 19000, /* amount of $ that can be spent min: 0. max: Number.MAX_SAFE_INTEGER - 1 */
    "stocks": {
        "GOOG": 10, /* min: 0. max: Number.MAX_SAFE_INTEGER - 1 */
        "TSLA": 5,
        "AAPL": 6,
        "AMZN": 100
    },

    "depositHistory": ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439011"], /* Array of deposit-history_id"s */

    "autoBuys": ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439011"], /* Array of automated-purchase id"s */
    "autoSells": ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439011"], /* Array of automated-sells id"s */

    "transactions": ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439011"], /* Array of transaction_id"s */

    "dailyValues": [15000, 16000, 15000, 18000, 19000], /* tracks portfolio value over time -- updated daily. | min: 0. max: Number.MAX_SAFE_INTEGER - 1 */ 
    
    "settings": {
        "_id": "507f1f77bcf86cd799439011",        /* Dont need this either */
        // "user_id": "507f1f77bcf86cd799439011",    /* Added - though this probably isn't neccessary */
    
        "initial_deposit": 15000,   /* min - 0 and max - Number.MAX_SAFE_INTEGER - 1 */
    
        "automated-deposit-freq": "weekly", /* none, daily, weekly, monthly */
        "automated-deposit-amount": 50, /* min: 1 and Number.MAX_SAFE_INTEGER - 1 */
    
        "minimum-account-balance": 5000, /* min: 0. max: Number.MAX_SAFE_INTEGER - 1*/
    
        "insufficient-funds-option": false /*  "true" = buy as many shares as you can afford. "false" = do not buy any shares at all */
    }

}



// depositHistory
{
    "_id": "507f1f77bcf86cd799439011",

    "stockPortfolio_id": "507f1f77bcf86cd799439011", /* Each deposit must correspond to a stock-portfolio document */

    "deposit-amount": 400, /* min: 1 and max: Number.MAX_SAFE_INTEGER - 1 */
    "manual-or-automated": true, /* false=automated deposite, true=manual */
    "deposit-date": "<YYYY-mm-dd>" /* store as new Date Object */
}

// autoBuys
{
    // Purchase up to 10 shares of google (GOOG) stock if the share-price reaches $2500 per share.
    // If the purchase is fulfilled, this object is deleted. 
    "_id": "507f1f77bcf86cd799439011",

    "portfolio_id": "507f1f77bcf86cd799439011", /* Each automated-purchase request must correspond to a stock-portfolio document */

    "ticker": "GOOG",
    "quantity": 10,     /* min: 1.  max: Number.MAX_SAFE_INTEGER - 1 */
    "threshold": 2500, /* must be < current stock price */
    "priority": 1 /* In the array of automated-purchases for a user, every priority must be unique */
}

// autoSells
{
    // Sell up to 5 shares of google (GOOG) stock if the share price reaches $2700 per share.
    "_id": "507f1f77bcf86cd799439011",

    "portfolio_id": "507f1f77bcf86cd799439011", /* Each automated-sell request must correspond to a stock portfolio document */

    "ticker": "GOOG",
    "quantity": 5, /* must be >= 1 */
    "threshold": 2700, /* must be > current stock price */
}


// Transactions
{
    "_id": "507f1f77bcf86cd799439011",

    "portfolio_id": "507f1f77bcf86cd799439011", /* Each transaction must correspond to a stock-portfolio document */

    "type": "purchase", /* "purchase" or "sell" */
    "ticker": "GOOG",
    "quantity": 5, /* min: 1.  max: Number.MAX_SAFE_INTEGER - 1 */
    "amount": 9000 /* positive number */,
    "date": "<YYYY-mm-dd>" /* store as new Date Object */
}
